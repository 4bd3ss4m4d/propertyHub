|-./
  |-vite.config.js
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react-swc';
    
    export default defineConfig({
      plugins: [react()],
      server: {
        proxy: {
          '/api': {
            target: process.env.VITE_API_URL || 'http://localhost:5000', // Use the environment variable
            changeOrigin: true,
            secure: false,
          },
        },
      },
    });
  |-eslint.config.js
    import js from '@eslint/js'
    import globals from 'globals'
    import react from 'eslint-plugin-react'
    import reactHooks from 'eslint-plugin-react-hooks'
    import reactRefresh from 'eslint-plugin-react-refresh'
    
    export default [
      { ignores: ['dist'] },
      {
        files: ['**/*.{js,jsx}'],
        languageOptions: {
          ecmaVersion: 2020,
          globals: globals.browser,
          parserOptions: {
            ecmaVersion: 'latest',
            ecmaFeatures: { jsx: true },
            sourceType: 'module',
          },
        },
        settings: { react: { version: '18.3' } },
        plugins: {
          react,
          'react-hooks': reactHooks,
          'react-refresh': reactRefresh,
        },
        rules: {
          ...js.configs.recommended.rules,
          ...react.configs.recommended.rules,
          ...react.configs['jsx-runtime'].rules,
          ...reactHooks.configs.recommended.rules,
          'react/jsx-no-target-blank': 'off',
          'react-refresh/only-export-components': [
            'warn',
            { allowConstantExport: true },
          ],
        },
      },
    ]
  |-src/
    |-main.jsx
      import React from 'react';
      import { createRoot } from 'react-dom/client';
      import App from './App';
      import { store } from './redux/store';
      import { Provider } from 'react-redux';
      import { loadUserFromStorage } from './redux/userSlice'; // Correct import
      
      const root = createRoot(document.getElementById('root'));
      
      // Load user from localStorage on app start
      store.dispatch(loadUserFromStorage());
      
      root.render(
        <React.StrictMode>
          <Provider store={store}>
            <App />
          </Provider>
        </React.StrictMode>
      );
    |-App.jsx
      import React, { Suspense, lazy } from "react";
      import { Routes, Route, BrowserRouter } from "react-router-dom";
      import "./App.css";
      
      // Lazy loading the components
      const Home = lazy(() => import("./pages/Home"));
      const FAQ = lazy(() => import("./pages/FAQ"));
      const SignUp = lazy(() => import("./pages/SignUp"));
      const SignIn = lazy(() => import("./pages/SignIn"));
      const AuthSuccess = lazy(() => import("./pages/AuthStatus").then(module => ({ default: module.AuthSuccess })));
      const AuthFailure = lazy(() => import("./pages/AuthStatus").then(module => ({ default: module.AuthFailure })));
      const Profile = lazy(() => import("./pages/Profile"));
      const Create = lazy(() => import("./pages/Create"));
      const ShowListing = lazy(() => import("./pages/ShowListing"));
      
      function App() {
        return (
          <BrowserRouter>
            <Suspense fallback={<div>Loading...</div>}>
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/faq" element={<FAQ />} />
                <Route path="/signup" element={<SignUp />} />
                <Route path="/signup/success" element={<AuthSuccess type="SignUp" />} /> 
                <Route path="/signup/failure" element={<AuthFailure type="SignUp" />} /> 
                <Route path="/signin" element={<SignIn />} />
                <Route path="/signin/success" element={<AuthSuccess type="SignIn" />} /> 
                <Route path="/signin/failure" element={<AuthFailure type="SignIn" />} /> 
                <Route path="/profile" element={<Profile />} /> 
                <Route path="/create" element={<Create />} /> 
                <Route path="/listing/:id" element={<ShowListing />} />
              </Routes>
            </Suspense>
          </BrowserRouter>
        );
      }
      
      export default App;
    |-components/
      |-FormInput.jsx
        import React from 'react';
        import '../assets/styles/formInput.css';
        
        const FormInput = ({ type, placeholder, value, onChange, className }) => {
          return (
            <input
              type={type}
              placeholder={placeholder}
              required
              className={className}
              value={value}
              onChange={onChange}
            />
          );
        };
        
        export default FormInput;
        
      |-SignUpFormLocal.jsx
        import React, { useState } from 'react';
        import InputField from './InputField';
        import FormInput from './FormInput';
        import { registerUser, checkEmailAvailability, checkUsernameAvailability } from '../services/authServices';
        import { validateField } from '../services/validationHelper';
        import { useNavigate } from 'react-router-dom';
        import ErrorDisplay from './ErrorDisplay'; // Import the ErrorDisplay component
        import '../assets/styles/signupLocalForm.css';
        import { useDispatch } from 'react-redux';
        import axiosWithHeader from '../services/axios'
        
        
        const SignUpForm = () => {
          const dispatch = useDispatch()
          const [firstName, setFirstName] = useState('');
          const [lastName, setLastName] = useState('');
          const [username, setUsername] = useState('');
          const [email, setEmail] = useState('');
          const [password, setPassword] = useState('');
          const [loading, setLoading] = useState(false);
        
          // Email state
          const [emailLoading, setEmailLoading] = useState(false);
          const [emailStatus, setEmailStatus] = useState(null); // 'valid', 'invalid', or 'error'
          const [emailError, setEmailError] = useState('');
        
          // Username state
          const [usernameLoading, setUsernameLoading] = useState(false);
          const [usernameStatus, setUsernameStatus] = useState(null); // 'valid', 'invalid', or 'error'
          const [usernameError, setUsernameError] = useState('');
        
          // Error and Success Messages
          const [errorMessages, setErrorMessages] = useState([]); // List of general error messages
          const [successMessage, setSuccessMessage] = useState(''); // Success message
          const [errors, setErrors] = useState([]); // Validation errors from the API
        
          const navigate = useNavigate();
        
          // Clear the error message on input change for username
          const handleUsernameChange = (e) => {
            setUsername(e.target.value);
            setUsernameError('');  // Clear error when user types
            setUsernameStatus(null); // Reset status when user types
          };
        
          // Clear the error message on input change for email
          const handleEmailChange = (e) => {
            setEmail(e.target.value);
            setEmailError('');  // Clear error when user types
            setEmailStatus(null); // Reset status when user types
          };
        
          // Handle validation for email on blur
          const handleEmailBlur = () =>
            validateField('email', email, setEmailLoading, setEmailStatus, setEmailError, checkEmailAvailability);
        
          // Handle validation for username on blur
          const handleUsernameBlur = () =>
            validateField('username', username, setUsernameLoading, setUsernameStatus, setUsernameError, checkUsernameAvailability);
        
          // Handle form submission
          const handleSignUp = async (e) => {
            
            e.preventDefault();
            console.log('Sign Up button clicked'); // Debug log
        
            // Check if the button is disabled
            if (loading || emailStatus === 'invalid' || usernameStatus === 'invalid' || !emailStatus || !usernameStatus) {
              console.log('Button is disabled, form submission prevented');
              return;
            }
        
            setLoading(true);
            setErrorMessages([]);  // Clear previous error messages
            setSuccessMessage(''); // Clear previous success message
        
            console.log('Attempting to register user with:', { firstName, lastName, username, email, password }); // Debug log
        
            try {
              console.log('Calling registerUser function'); // Debug log
              const response = await registerUser({ firstName, lastName, username, email, password }, dispatch);
              
              localStorage.setItem('token', response.data.token);
              // Set the token as a default header for future requests
              axiosWithHeader.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;
              console.log('Received response:', response); // Debug log
              
              if (response.data.message === "User registered successfully.") {
                // Redirect to the success page on successful registration
                navigate('/signup/success'); // Redirect to AuthSuccess page
              } else {
                setErrorMessages(["An unexpected error occurred. Please try again."]);
              }
            } catch (err) {
              console.error('Error during registration:', err); // Debug log
              if (err.response && err.response.data && err.response.data.error) {
                const validationErrors = err.response.data.error.errors || [];
                setErrors(validationErrors); // Set validation errors from the server response
              } else if (err.request) {
                setErrorMessages(["No response received from server. Please try again."]);
              } else {
                setErrorMessages([`Error: ${err.message}`]);
              }
            } finally {
              setLoading(false);
            }
          };
        
          return (
            <div className="register-container">
              <h1>Create an Account</h1>
        
              {/* Display success message */}
              {successMessage && <p className="success-message">{successMessage}</p>}
        
              {/* Display general error messages */}
              {errorMessages.length > 0 && (
                <div className="error-messages">
                  {errorMessages.map((message, index) => (
                    <p key={index} className="error-message">{message}</p>
                  ))}
                </div>
              )}
        
              <form onSubmit={handleSignUp}>
                <div className="name-fields">
                  <FormInput
                    type="text"
                    placeholder="First Name*"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    className="input-firstname"
                  />
                  <FormInput
                    type="text"
                    placeholder="Last Name*"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    className="input-lastname"
                  />
                </div>
        
                {/* Username Input Field with validation */}
                <InputField
                  type="text"
                  placeholder="Username*"
                  value={username}
                  onChange={handleUsernameChange}  // Handle username change to clear errors
                  onBlur={handleUsernameBlur}      // Trigger validation on blur
                  status={usernameStatus}          // 'valid' or 'invalid'
                  loading={usernameLoading}        // Show loading icon while checking
                />
                {/* Error message when username is invalid */}
                {!usernameLoading && usernameStatus === 'invalid' && (
                  <p className="error-message">{usernameError}</p>  // Show only if username is invalid
                )}
        
                {/* Email Input Field with validation */}
                <InputField
                  type="email"
                  placeholder="Email Address*"
                  value={email}
                  onChange={handleEmailChange}     // Handle email change to clear errors
                  onBlur={handleEmailBlur}         // Trigger validation on blur
                  status={emailStatus}             // 'valid' or 'invalid'
                  loading={emailLoading}           // Show loading icon while checking
                />
                {/* Error message when email is invalid */}
                {!emailLoading && emailStatus === 'invalid' && (
                  <p className="error-message">{emailError}</p>  // Show only if email is invalid
                )}
        
                {/* Password Input */}
                <FormInput
                  type="password"
                  placeholder="Password*"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="input-password"
                />
        
                {/* Display validation errors */}
                <ErrorDisplay errors={errors} />
        
                {/* Submit Button */}
                <button
                  type="submit"
                  className="continue-button"
                  disabled={loading || emailStatus === 'invalid' || usernameStatus === 'invalid' || !emailStatus || !usernameStatus}
                >
                  {loading ? 'Signing up...' : 'Sign Up'}
                </button>
              </form>
            </div>
          );
        };
        
        export default SignUpForm;
        
      |-Footer.jsx
        import React, { useState } from "react";
        import "../assets/styles/footer.css";
        import { Link } from "react-router-dom";
        
        export default function Footer() {
            const [email, setEmail] = useState("");
        
            const handleEmail = (e)=> { 
                    setEmail(e.target.value)
            }
        
        
            const handleSubmit = (e)=>{
                e.preventDefault();
                console.log(email)
        
            }
          return (
            <footer className="footer">
              <div className="footer-content">
                <div className="footer-about">
                  <h2>PropertyHub</h2>
                  <p>
                    Your trusted partner in real estate. Helping you find your dream
                    home or sell your property with ease.
                  </p>
                  <div className="social-media">
                    <a
                      href="https://facebook.com/PropertyHub"
                      aria-label="Facebook"
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        fill="#ecf0f1"
                        viewBox="0 0 24 24"
                      >
                        <path d="M22.675 0h-21.35c-.733 0-1.325.592-1.325 1.325v21.351c0 .732.592 1.324 1.325 1.324h11.494v-9.294h-3.124v-3.622h3.124v-2.671c0-3.1 1.894-4.787 4.659-4.787 1.325 0 2.462.099 2.793.143v3.24l-1.917.001c-1.504 0-1.795.715-1.795 1.764v2.31h3.587l-.467 3.622h-3.12v9.294h6.116c.732 0 1.324-.592 1.324-1.324v-21.35c0-.733-.592-1.325-1.325-1.325z" />
                      </svg>
                    </a>
                    <a
                      href="https://twitter.com/PropertyHub"
                      aria-label="Twitter"
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        fill="#ecf0f1"
                        viewBox="0 0 24 24"
                      >
                        <path d="M24 4.557c-.883.392-1.83.656-2.825.775 1.014-.608 1.794-1.57 2.163-2.723-.949.564-2.003.974-3.127 1.195-.896-.954-2.173-1.55-3.591-1.55-2.717 0-4.917 2.201-4.917 4.917 0 .386.043.762.127 1.124-4.083-.205-7.702-2.159-10.125-5.134-.423.724-.666 1.561-.666 2.457 0 1.694.863 3.188 2.175 4.065-.801-.025-1.555-.245-2.212-.612v.061c0 2.367 1.683 4.342 3.918 4.789-.41.111-.841.171-1.287.171-.314 0-.621-.031-.921-.087.623 1.947 2.432 3.362 4.576 3.402-1.675 1.313-3.785 2.096-6.076 2.096-.395 0-.786-.023-1.17-.068 2.165 1.389 4.736 2.2 7.504 2.2 9.005 0 13.92-7.461 13.92-13.92 0-.212-.005-.425-.014-.637.954-.688 1.786-1.548 2.443-2.532z" />
                      </svg>
                    </a>
                    <a
                      href="https://instagram.com/PropertyHub"
                      aria-label="Instagram"
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        fill="#ecf0f1"
                        viewBox="0 0 24 24"
                      >
                        <path d="M12 2.163c3.204 0 3.584.012 4.849.07 1.366.062 2.633.333 3.608 1.308.975.975 1.246 2.242 1.308 3.608.058 1.265.069 1.645.069 4.849s-.012 3.584-.07 4.849c-.062 1.366-.333 2.633-1.308 3.608-.975.975-2.242 1.246-3.608 1.308-1.265.058-1.645.069-4.849.069s-3.584-.012-4.849-.07c-1.366-.062-2.633-.333-3.608-1.308-.975-.975-1.246-2.242-1.308-3.608-.058-1.265-.069-1.645-.069-4.849s.012-3.584.07-4.849c.062-1.366.333-2.633 1.308-3.608.975-.975 2.242-1.246 3.608-1.308 1.265-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-1.702.076-3.23.487-4.388 1.646-1.158 1.158-1.569 2.686-1.646 4.388-.058 1.28-.072 1.688-.072 4.947s.014 3.667.072 4.947c.076 1.702.487 3.23 1.646 4.388 1.158 1.158 2.686 1.569 4.388 1.646 1.28.058 1.688.072 4.947.072s3.667-.014 4.947-.072c1.702-.076 3.23-.487 4.388-1.646 1.158-1.158 1.569-2.686 1.646-4.388.058-1.28.072-1.688.072-4.947s-.014-3.667-.072-4.947c-.076-1.702-.487-3.23-1.646-4.388-1.158-1.158-2.686-1.569-4.388-1.646-1.28-.058-1.688-.072-4.947-.072z" />
                        <path d="M12 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.162 6.162 6.162 6.162-2.759 6.162-6.162-2.759-6.162-6.162-6.162zm0 10.162c-2.206 0-4-1.794-4-4s1.794-4 4-4 4 1.794 4 4-1.794 4-4 4zm6.406-11.845c-.796 0-1.443.647-1.443 1.443s.647 1.443 1.443 1.443 1.443-.647 1.443-1.443-.647-1.443-1.443-1.443z" />
                      </svg>
                    </a>
                  </div>
                </div>
        
                <div className="footer-links">
                  <h3>Quick Links</h3>
                  <ul>
                    <li>
                      <Link to="/">Home</Link>
                    </li>
                    <li>
                      <Link to="/profile">Profile</Link>
                    </li>
                  </ul>
                </div>
        
                <div className="footer-newsletter">
                  <h3>Subscribe to our Newsletter</h3>
                  <form>
                    <input type="email" placeholder="Enter your email" onChange={handleEmail}/>
                    <button type="submit" onClick={handleSubmit}>Subscribe</button>
                  </form>
                </div>
              </div>
        
              <div className="footer-bottom">
                <p>&copy; {new Date().getFullYear()} PropertyHub. All rights reserved.</p>
              </div>
            </footer>
          );
        }
      |-card.jsx
        import React, { useState, useEffect } from 'react';
        import axios from 'axios';
        import { useNavigate } from 'react-router-dom';
        import '../assets/styles/card.css'; // Updated file name for the new styles
        
        export default function ListingCard() {
            const [listings, setListings] = useState([]);
            const navigate = useNavigate();
        
            useEffect(() => {
                let isMounted = true; 
        
                const fetchListings = async () => {
                    try {
                        const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/properties`);
                        if (isMounted) {
                            setListings(response.data.data);
                        }
                    } catch (error) {
                        console.error('Error fetching data:', error);
                    }
                };
                
                fetchListings();
        
                return () => {
                    isMounted = false; 
                };
            }, []);
        
            const handleClick = (id) => {
                navigate(`/listing/${id}`);
            };
        
            return (
                <div className="listing-container">
                    {listings.map((listing) => (
                        <div key={listing._id} className="listing-card" onClick={() => handleClick(listing._id)}>
                            <img 
                                className={`listing-image ${listing.images.length > 0 ? '' : 'default-image'}`} 
                                src={listing.images[0] || 'defaultImageUrl'} 
                                alt={listing.title} 
                                loading="lazy"
                            />
                            {listing.offerType === 'Rent' ? (
                                <p className='badge rent-badge'>Rent</p>
                            ) : (
                                <p className='badge sale-badge'>Sale</p>
                            )}
                            <div className="listing-info">
                                <h3 className="listing-title">{listing.title}</h3>
                                <p className="listing-address">{listing.address.street}, {listing.address.city}, {listing.address.country}</p>
                                <h2 className="listing-price">${listing.price.toLocaleString()}</h2>
                            </div>
                        </div>
                    ))}
                </div>
            );
        }
      |-TextFieldsAndCheckbox.jsx
        import React from "react";
        
        export default function TextFieldsAndCheckbox({ data, handleChange }) {
          return (
            <>
              {/* Title */}
              <input
                type="text"
                placeholder="Title"
                name="title"
                value={data.title}
                onChange={handleChange}
                required
              />
        
              {/* Description */}
              <input
                type="text"
                placeholder="Description"
                name="description"
                value={data.description}
                onChange={handleChange}
                required
              />
        
              {/* Address Fields */}
              <input
                type="text"
                placeholder="Street Address"
                name="address.street"
                value={data.address.street}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                placeholder="City"
                name="address.city"
                value={data.address.city}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                placeholder="State"
                name="address.state"
                value={data.address.state}
                onChange={handleChange}
                required
              />
              <input
                type="text"
                placeholder="Zip Code"
                name="address.zipCode"
                value={data.address.zipCode}
                onChange={handleChange}
                required
              />
        
              {/* Phone Number */}
              <input
                type="text"
                placeholder="Phone"
                name="phone"
                value={data.phone}
                onChange={handleChange}
                required
              />
        
              {/* Property Type */}
              <p>Property Type</p>
              <select
                name="propertyType"
                value={data.propertyType}
                onChange={handleChange}
                className="propertyType"
                required
              >
                <option value="">Select Property Type</option>
                <option value="Apartment">Apartment</option>
                <option value="House">House</option>
                <option value="Condo">Condo</option>
                <option value="Land">Land</option>
                <option value="Villa">Villa</option>
                <option value="Office">Office</option>
                <option value="Studio">Studio</option>
              </select>
        
              {/* Size */}
              <label htmlFor="size">Size (sq. ft / m²)</label>
              <input
                type="number"
                name="size"
                value={data.size}
                onChange={handleChange}
                required
              />
        
              {/* Year Built */}
              <label htmlFor="yearBuilt">Year Built</label>
              <input
                type="number"
                name="yearBuilt"
                min="1800"
                max={new Date().getFullYear()}
                value={data.yearBuilt}
                onChange={handleChange}
                required
              />
        
              {/* Rooms */}
              <label htmlFor="rooms">Rooms</label>
              <input
                type="number"
                name="rooms"
                min="1"
                value={data.rooms}
                onChange={handleChange}
                required
              />
        
              {/* Bathrooms */}
              <label htmlFor="bathrooms">Bathrooms</label>
              <input
                type="number"
                name="bathrooms"
                min="1"
                value={data.bathrooms}
                onChange={handleChange}
                required
              />
        
              {/* Bedrooms */}
              <label htmlFor="bedrooms">Bedrooms</label>
              <input
                type="number"
                name="bedrooms"
                min="1"
                value={data.bedrooms}
                onChange={handleChange}
                required
              />
        
              {/* Offer Type: Rent or Sell as a Dropdown */}
              <h3>This is for?</h3>
              <select
                name="offerType"
                value={data.offerType}
                onChange={handleChange}
                className="offer-type"
                required
              >
                <option value="">Select Offer Type</option>
                <option value="Rent">Rent</option>
                <option value="Sale">Sale</option>
              </select>
        
              {/* Additional Features: Parking, Wi-Fi, Pet-Friendly */}
              <h3>Include :</h3>
              <div className="check">
                <label htmlFor="parking" className="cheking">
                  Parking
                  <input
                    type="checkbox"
                    name="parking"
                    id="parking"
                    className="checkbox"
                    checked={data.parking}
                    onChange={handleChange}
                  />
                </label>
        
                <label htmlFor="wifi" className="cheking">
                  Wi-Fi
                  <input
                    type="checkbox"
                    name="wifi"
                    id="wifi"
                    className="checkbox"
                    checked={data.wifi}
                    onChange={handleChange}
                  />
                </label>
        
                <label htmlFor="petFriendly" className="cheking">
                  Pet-friendly
                  <input
                    type="checkbox"
                    name="petFriendly"
                    id="petFriendly"
                    className="checkbox"
                    checked={data.petFriendly}
                    onChange={handleChange}
                  />
                </label>
              </div>
        
              {/* Price */}
              <label htmlFor="price">Price</label>
              <div className="price">
                <input
                  type="number"
                  name="price"
                  min="0"
                  id="price"
                  value={data.price}
                  onChange={handleChange}
                  required
                />
                <p>{data.offerType === "Rent" ? "$ / month" : "$"}</p>
              </div>
            </>
          );
        }
      |-ImageUpload.jsx
        import React from "react";
        
        export default function ImageUpload({ handleFileChange, createImagePreviews }) {
          return (
            <>
              <label htmlFor="images">Upload Images</label>
              <input
                type="file"
                name="images"
                id="images"
                accept="image/*"
                multiple
                onChange={handleFileChange}
              />
        
              <div className="image-previews">{createImagePreviews()}</div>
            </>
          );
        }
      |-search.jsx
        import React, { useState } from "react";
        import axios from "axios";
        import "../assets/styles/search.css";
        
        export default function Search() {
          const [filters, setFilters] = useState({
            offerType: "",
            location: "",
            bathrooms: "",
            rooms: "",
            wifi: false,
            petFriendly: false,
            parking: false,
            priceMax: "",
            more: false,
          });
        
          const handleInputChange = (e) => {
            const { name, value, type, checked } = e.target;
            setFilters({
              ...filters,
              [name]: type === "checkbox" ? checked : value,
            });
          };
        
          // Function to construct query string based on selected filters
          const createQueryString = (params) => {
            return Object.entries(params)
              .filter(([key, value]) => value !== "" && value !== false) // Filter out empty values
              .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
              .join("&");
          };
        
          const handleSubmit = (e) => {
            e.preventDefault();
        
            // Create query string based on the filters object
            const queryString = createQueryString(filters);
            console.log(queryString)
        
            //sending query to the backend
          };
        
          return (
            <form className="serchContainer" onSubmit={handleSubmit}>
              <div className="OfferAndLocation">
                <div className="offer-type">
                  <p>Offer Type</p>
                  <select
                    name="offerType"
                    className="select"
                    value={filters.offerType}
                    onChange={handleInputChange}
                  >
                    <option value="" disabled hidden>
                      Select Offer Type
                    </option>
                    <option value="rent">Rent</option>
                    <option value="sale">Sale</option>
                  </select>
                </div>
        
                <div className="location">
                  <p>Location</p>
                  <input
                    type="text"
                    name="location"
                    placeholder="City/Location name"
                    value={filters.location}
                    onChange={handleInputChange}
                  />
                </div>
              </div>
        
              {filters.more && (
                <div className="filters show">
                  <div className="filter-group">
                    <label htmlFor="bathrooms">Bathrooms</label>
                    <input
                      type="number"
                      name="bathrooms"
                      min="1"
                      placeholder="e.g., 2"
                      value={filters.bathrooms}
                      onChange={handleInputChange}
                    />
                  </div>
        
                  <div className="filter-group">
                    <label htmlFor="rooms">Rooms</label>
                    <input
                      type="number"
                      name="rooms"
                      min="1"
                      placeholder="e.g., 3"
                      value={filters.rooms}
                      onChange={handleInputChange}
                    />
                  </div>
        
                  <div className="filter-group">
                    <label htmlFor="priceMax">Price Maximum</label>
                    <input
                      type="number"
                      name="priceMax"
                      min="0"
                      placeholder="e.g., 1000"
                      value={filters.priceMax}
                      onChange={handleInputChange}
                    />
                  </div>
        
                  <div className="filter-group">
                    <div className="checkbox-container">
                      <div className="checkbox-item">
                        <input
                          type="checkbox"
                          name="wifi"
                          id="wifi"
                          checked={filters.wifi}
                          onChange={handleInputChange}
                        />
                        <label htmlFor="wifi">WiFi</label>
                      </div>
                      <div className="checkbox-item">
                        <input
                          type="checkbox"
                          name="petFriendly"
                          id="petFriendly"
                          checked={filters.petFriendly}
                          onChange={handleInputChange}
                        />
                        <label htmlFor="petFriendly">Pet Friendly</label>
                      </div>
                      <div className="checkbox-item">
                        <input
                          type="checkbox"
                          name="parking"
                          id="parking"
                          checked={filters.parking}
                          onChange={handleInputChange}
                        />
                        <label htmlFor="parking">Parking</label>
                      </div>
                    </div>
                  </div>
                </div>
              )}
        
              <div className="actions">
                <button type="submit" className="button search-button">
                  Search
                </button>
                <button
                  type="button"
                  className="button filter-button"
                  onClick={() => setFilters({ ...filters, more: !filters.more })}
                >
                  {filters.more ? "Hide Filters" : "More Filters"}
                </button>
              </div>
            </form>
          );
        }
      |-InputField.jsx
        import React from 'react';
        import { FaCheck, FaTimes } from 'react-icons/fa';
        import '../assets/styles/inputField.css';
        
        const InputField = ({ type, placeholder, value, onChange, onBlur, status, loading }) => {
          return (
            <div className="input-wrapper">
              <input
                type={type}
                placeholder={placeholder}
                value={value}
                onChange={onChange}
                onBlur={onBlur}
                className={`input-field ${status ? status : ''}`}
              />
              <div className="icon-container">
                {loading && <div className="loading-icon"></div>}
        
                {/* Show icons only if value is not empty and loading is false */}
                {!loading && value && status === 'valid' && <FaCheck className="valid-icon" />}  {/* Green check for valid */}
                {!loading && value && status === 'invalid' && <FaTimes className="invalid-icon" />} {/* Red cross for invalid */}
              </div>
            </div>
          );
        };
        
        export default InputField;
        
      |-ErrorDisplay.jsx
        import React from 'react';
        
        const ErrorDisplay = ({ errors }) => {
          // Check if there are no errors or if errors is not an array
          if (!errors || !Array.isArray(errors) || errors.length === 0) {
            return null; // Don't render anything if there are no errors
          }
        
          // Group errors by field
          const groupedErrors = errors.reduce((acc, error) => {
            const field = error.field || 'general'; // Use 'general' if field is not specified
            if (!acc[field]) {
              acc[field] = [];
            }
            acc[field].push(error.message);
            return acc;
          }, {});
        
          return (
            <div className="error-display">
              {Object.entries(groupedErrors).map(([field, messages]) => (
                <div key={field} className="error-category">
                  <h4>{field.charAt(0).toUpperCase() + field.slice(1)}:</h4>
                  <ul>
                    {messages.map((message, index) => (
                      <li key={index}>{message}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          );
        };
        
        export default ErrorDisplay;
        
      |-SignUpOAuth.jsx
        import React, { useState, useEffect } from 'react';
        import { useSearchParams } from 'react-router-dom';
        import '../assets/styles/signupOAuthForm.css';  // OAuth-specific styling
        import { jwtDecode } from "jwt-decode";
        
        const SignUpOAuth = () => {
          const [searchParams] = useSearchParams();
          const [errorMessage, setErrorMessage] = useState('');
        
          useEffect(() => {
            const token = searchParams.get('token');
            
            
            if (token) {
              setErrorMessage("Successfully");
              const decoded = jwtDecode(token);
              console.log({decoded});
              
            }
          }, [searchParams]);
        
          const redirectToGoogleSignUp = () => {
            window.location.href = `${import.meta.env.VITE_API_URL}/api/auth/google/signup`;
          };
        
          const redirectToMicrosoftSignUp = () => {
            window.location.href = `${import.meta.env.VITE_API_URL}/api/auth/microsoft/signup`;
          };
        
          const redirectToAppleSignUp = () => {
            window.location.href = `${import.meta.env.VITE_API_URL}/api/auth/apple/signup`;
          };
        
          return (
            <div className="register-container">
              <h1>Create an Account</h1>
              {errorMessage && <p className="error-message">{errorMessage}</p>}
              
              <div className="divider">
                <hr /> <span>Sign up with</span> <hr />
              </div>
              
              <div className="social-login">
                <button className="social-button google" onClick={redirectToGoogleSignUp}>
                  <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google Logo" />
                  Continue with Google
                </button>
        
                <button className="social-button microsoft" onClick={redirectToMicrosoftSignUp}>
                  <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Microsoft_logo.svg/1024px-Microsoft_logo.svg.png" alt="Microsoft Logo" />
                  Continue with Microsoft
                </button>
        
                <button className="social-button apple" onClick={redirectToAppleSignUp}>
                  <img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg" alt="Apple Logo" />
                  Continue with Apple
                </button>
              </div>
            </div>
          );
        };
        
        export default SignUpOAuth;
        
      |-navbar.jsx
        import React, { useState } from 'react';
        import { NavLink, useNavigate } from 'react-router-dom';
        import Flag from 'react-world-flags';
        import '../assets/styles/navbar.css';
        import { FaBars, FaTimes, FaUser, FaGlobe, FaQuestionCircle } from 'react-icons/fa';
        import { useSelector } from 'react-redux';
        import { SignOut } from '../services/authServices';
        
        export default function Navbar() {
          const { currentUser } = useSelector((state) => state.user);
          const [toggle, setToggle] = useState({
            isMobileMenuOpen: false,
            isProfileMenuOpen: false,
            isLanguageMenuOpen: false,
            isProfileOpen: false
          });
        
          const navigate = useNavigate();
        
          const handleToggle = (menu) => {
            setToggle((prevState) => ({
              isMobileMenuOpen: menu === 'mobile' ? !prevState.isMobileMenuOpen : false,
              isProfileMenuOpen: menu === 'profile' ? !prevState.isProfileMenuOpen : false,
              isLanguageMenuOpen: menu === 'language' ? !prevState.isLanguageMenuOpen : false,
              isProfileOpen: menu === 'profileLogged' ? !prevState.isProfileOpen : false,
            }));
          };
        
          return (
            <header className="navbar">
              {/* Hamburger & FAQ Icon */}
              <div className="hamburger-menu">
                {toggle.isMobileMenuOpen ? (
                  <FaTimes onClick={() => handleToggle('mobile')} className="icon" />
                ) : (
                  <>
                    <FaBars onClick={() => handleToggle('mobile')} className="icon" />
                    <FaQuestionCircle onClick={() => navigate('/faq')} className="icon faq-icon" /> {/* FAQ Icon */}
                  </>
                )}
              </div>
        
              {/* Center Logo */}
              <div className="logo">
                <NavLink to="/">
                  <img 
                    src="https://i.ibb.co/mv6JJbL/Property-Hub-Logo-White.png" 
                    alt="PropertyHub Logo" 
                    className="logo-img"
                  />
                </NavLink>
              </div>
        
              {/* Right-side Icons */}
              <div className="right-icons">
                {toggle.isLanguageMenuOpen ? (
                  <FaTimes onClick={() => handleToggle('language')} className="icon" />
                ) : (
                  <FaGlobe onClick={() => handleToggle('language')} className="icon" />
                )}
                {currentUser ? (
                  <div className="name-text profile-icon" onClick={() => handleToggle('profileLogged')}>
                    {currentUser.username}
                  </div>
                ) : (
                  <FaUser onClick={() => handleToggle('profile')} className="icon profile-icon" />
                )}
              </div>
        
              {/* Mobile Menu - Buy, Rent, Sell, Agents */}
              {toggle.isMobileMenuOpen && (
                <div className="mobile-menu">
                  <NavLink to="/buy" className="menu-link" onClick={() => handleToggle('mobile')}>Buy</NavLink>
                  <NavLink to="/rent" className="menu-link" onClick={() => handleToggle('mobile')}>Rent</NavLink>
                  <NavLink to="/sell" className="menu-link" onClick={() => handleToggle('mobile')}>Sell</NavLink>
                  <NavLink to="/agents" className="menu-link" onClick={() => handleToggle('mobile')}>Agents</NavLink>
                </div>
              )}
        
              {/* Profile Menu - Sign In & Sign Up */}
              {toggle.isProfileMenuOpen && (
                <div className="profile-menu">
                  <button onClick={() => navigate('/signin')} className="profile-button">Sign In</button>
                  <button onClick={() => navigate('/signup')} className="profile-button">Sign Up</button>
                </div>
              )}
        
              {/* Logged-in Profile Menu */}
              {toggle.isProfileOpen && (
                <div className="profile-menu">
                  <button onClick={() => navigate('/profile')} className="profile-button">Profile</button>
                  <button onClick={() => SignOut()} className="profile-button">Sign Out</button>
                </div>
              )}
        
              {/* Language Menu */}
              {toggle.isLanguageMenuOpen && (
                <div className="language-menu">
                  <div className="language-option">
                    <Flag code="US" className="flag-icon" /> <span>English</span>
                  </div>
                  <div className="language-option">
                    <Flag code="MA" className="flag-icon" /> <span>العربية</span>
                  </div>
                  <div className="language-option">
                    <Flag code="FR" className="flag-icon" /> <span>Français</span>
                  </div>
                  <div className="language-option">
                    <Flag code="ES" className="flag-icon" /> <span>Español</span>
                  </div>
                  <div className="language-option">
                    <Flag code="DE" className="flag-icon" /> <span>Deutsch</span>
                  </div>
                  <div className="language-option">
                    <Flag code="BR" className="flag-icon" /> <span>Português</span>
                  </div>
                </div>
              )}
            </header>
          );
        }
    |-redux/
      |-store.js
        import { configureStore } from '@reduxjs/toolkit';
        import userReducer from './userSlice';
        
        export const store = configureStore({
          reducer: {
            user: userReducer,
          },
        });
      |-userSlice.js
        import { createSlice } from '@reduxjs/toolkit';
        import Cookies from 'js-cookie';
        import {jwtDecode }from 'jwt-decode'; // Ensure jwt-decode is imported
        
        const USER_STORAGE_KEY = 'propertyHubUser';
        
        // Initial state
        const initialState = {
          currentUser: null,
        };
        
        // Create user slice
        const userSlice = createSlice({
          name: 'user',
          initialState,
          reducers: {
            setUser: (state, action) => {
              state.currentUser = action.payload;
              // Save user to localStorage
              localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(action.payload));
            },
            clearUser: (state) => {
              state.currentUser = null;
              // Remove user from localStorage
              localStorage.removeItem(USER_STORAGE_KEY);
            },
          },
        });
        
        // Export actions
        export const { setUser, clearUser } = userSlice.actions;
        
        // Thunk to load user data from localStorage or cookies
        export const loadUserFromStorage = () => (dispatch) => {
          // Try to load user from localStorage
          const savedUser = localStorage.getItem(USER_STORAGE_KEY);
        
          if (savedUser) {
            try {
              const parsedUser = JSON.parse(savedUser); // Safely parse JSON
              dispatch(setUser(parsedUser)); // Set user in Redux
            } catch (error) {
              console.error('Error parsing user from localStorage:', error);
              localStorage.removeItem(USER_STORAGE_KEY); // Clear corrupted data
            }
          } else {
            // Fallback to loading user from cookies (if you want to)
            const token = Cookies.get('propertyHubAuthToken');
            if (token) {
              try {
                const userData = jwtDecode(token); // Decode the token to get user data
                
                
                dispatch(setUser(userData));
              } catch (error) {
                console.error('Error decoding token:', error);
              }
            }
          }
        };
        
        // Export reducer
        export default userSlice.reducer;
    |-assets/
      |-styles/
    |-pages/
      |-FAQ.jsx
        import React, { useEffect, useState } from 'react';
        import axios from 'axios';
        import '../assets/styles/faq.css';
        import Navbar from '../components/navbar';
        import Footer from '../components/Footer';
        
        const FAQ = () => {
          const [faqs, setFaqs] = useState([]);
          const [loading, setLoading] = useState(true);
          const [error, setError] = useState(null);
        
          // Fetch FAQs from the API
          useEffect(() => {
            const fetchFaqs = async () => {
              try {
                const response = await axios.get('/api/faqs');
                setFaqs(response.data);
                setLoading(false);
              } catch (err) {
                setError(err.response?.data?.message || 'Failed to fetch FAQs');
                setLoading(false);
              }
            };
        
            fetchFaqs();
          }, []);
        
          const toggleFaq = (id) => {
            setFaqs(faqs.map(faq => faq._id === id ? { ...faq, open: !faq.open } : faq));
          };
        
          return (
            <>
            <Navbar />
            <div className="faq-page">
              {/* FAQ Section */}
              <div className="faq-container">
                <h2>Frequently Asked Questions</h2>
                {loading && <p>Loading FAQs...</p>}
                {error && <p>Error loading FAQs: {error}</p>}
        
                {!loading && !error && faqs.length === 0 && <p>No FAQs available at the moment.</p>}
        
                {!loading && !error && faqs.length > 0 && (
                  <div className="faq-list">
                    {faqs.map(faq => (
                      <div key={faq._id} className={`faq-item ${faq.open ? 'open' : ''}`}>
                        <div className="faq-question" onClick={() => toggleFaq(faq._id)}>
                          {faq.question}
                          <span className="faq-toggle">{faq.open ? '-' : '+'}</span>
                        </div>
                        {faq.open && (
                          <div className="faq-answer">
                            <p>{faq.answer}</p>
                            {faq.tags && faq.tags.length > 0 && (
                              <div className="faq-meta">
                                {faq.tags.map(tag => (
                                  <span key={tag}>{tag}</span>
                                ))}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
              
            </div>
            
            <Footer />
            </>
          );
        };
        
        export default FAQ;
      |-Create.jsx
        import React, { useState } from "react";
        import axios from "axios";
        import '../assets/styles/create.css';
        import Navbar from "../components/navbar";
        import { useSelector } from "react-redux";
        import TextFieldsAndCheckbox from "../components/TextFieldsAndCheckbox";
        import ImageUpload from "../components/ImageUpload";
        import Footer from "../components/Footer";
        import axiosWithHeader from "../services/axios";
        
        export default function Create() { 
        
        
          const API_URL = import.meta.env.VITE_API_URL;
          const { currentUser } = useSelector((state) => state.user); // Access the logged-in user
        
          const [images, setImages] = useState([]);
          const [data, setData] = useState({
            title: '',
            description: '',
            propertyType: '',
            price: '', // Will be converted to a number
            size: '',  // Will be converted to a number
            yearBuilt: '',
            bedrooms: '',
            bathrooms: '',
            rooms: '',
            offerType: '', // Either "Rent" or "Sale"
            wifi: false,
            petFriendly: false,
            parking: false,
            availableFrom: new Date().toISOString().slice(0, 10),
            address: {
              street: '',
              city: '',
              state: '',
              zipCode: '',
              country: 'Morocco', // Default to "Morocco" if not provided
            },
            images: [], // Placeholder for image URLs after upload
            phoneNumber: '',
            status: 'Available', // Default status
            amenities: [], // Placeholder for amenities
            isFeatured: false, // Track if the listing is featured
          });
        
          // Handle file input change for image upload
          const handleFileChange = (event) => {
            setImages([...event.target.files]);
          };
        
          // Handle form changes (both text fields and checkboxes)
          const handleChange = (e) => {
            const { name, type, value, checked } = e.target;
        
            if (name.includes('address.')) {
              const field = name.split('.')[1];
              setData((prev) => ({
                ...prev,
                address: { ...prev.address, [field]: value }
              }));
            } else {
              setData((prev) => ({
                ...prev,
                [name]: type === 'checkbox' ? checked : value
              }));
            }
          };
        
          // Handle form submission to send listing data and upload images
          const handleSubmit = async (event) => {
            event.preventDefault();
        
            // Convert numeric values before submitting
            const formattedData = {
              ...data,
              price: Number(data.price), // Convert price to a number
              size: Number(data.size),  
              bedrooms: Number(data.bedrooms),
              bathrooms: Number(data.bathrooms),
              rooms: Number(data.rooms),
            };
        
            const formData = new FormData();
            const imageUrls = [];
        
            // Upload images to Cloudinary
            for (const image of images) {
              formData.append("file", image);
              formData.append("upload_preset", import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET);
        
              try {
                const response = await axios.post(
                  `https://api.cloudinary.com/v1_1/${import.meta.env.VITE_CLOUDINARY_CLOUD_NAME}/image/upload`,
                  formData
                );
                imageUrls.push(response.data.secure_url);
              } catch (error) {
                console.error("Error uploading image to Cloudinary:", error);
                alert("Error during uploading image");
                return;
              }
            }
        
            // Prepare the final data object with image URLs and ensure proper data types
            const updatedData = {
              ...formattedData, // Use the formatted data with correct types
              images: imageUrls, // Add uploaded image URLs
              offerType: data.offerType.charAt(0).toUpperCase() + data.offerType.slice(1), // Capitalize offerType
            };
            console.log("Property listing created successfully", updatedData);
        
            // Send the data to the backend with JWT token in headers
            try {
              await axiosWithHeader.post(`${API_URL}/api/properties`, updatedData)
              .then((response)=>{console.log(response)});
              alert("Lesting created successfully.")
              
        
            } catch (error) {
              console.error("Error creating listing:", error);
            }
          };
        
          // Create image previews to display selected images
          const createImagePreviews = () => {
            return Array.from(images).map((file, index) => {
              const url = URL.createObjectURL(file);
              return (
                <img
                  key={index}
                  src={url}
                  alt={`preview ${index}`}
                  className="image-preview" // Added class for image preview styling
                  style={{ width: "100px", height: "100px", objectFit: "cover", margin: "5px" }}
                />
              );
            });
          };
        
          return (
            <>
              <Navbar />
        
              <div className="creating-container">
                <h2>Create Property Listing</h2>
                <form className="creating" onSubmit={handleSubmit}>
                  <TextFieldsAndCheckbox data={data} handleChange={handleChange} />
        
                  <ImageUpload handleFileChange={handleFileChange} createImagePreviews={createImagePreviews} />
                  <button type="submit" className="submit-btn">Create</button>
                </form>
              </div>
        
              <Footer />
            </>
          );
        }
      |-ShowListing.jsx
        import React, { useEffect, useState } from 'react';
        import { useParams, useNavigate } from 'react-router-dom';
        import Navbar from '../components/navbar';
        import axios from 'axios';
        import Slider from "react-slick";
        import { FaParking, FaWifi, FaPaw, FaBed, FaBath, FaPhoneAlt } from 'react-icons/fa';
        import "slick-carousel/slick/slick.css";
        import "slick-carousel/slick/slick-theme.css";
        import '../assets/styles/showListing.css';
        
        export default function ShowListing() {
            
            const { id } = useParams();
            const [listing, setListing] = useState(null);
            const navigate = useNavigate();
        
            useEffect(() => {
                let isMounted = true;
        
                const fetchListing = async () => {
                    try {
                        const response = await axios.get(`${import.meta.env.VITE_API_URL}/api/properties/${id}`);
                        if (isMounted) {
                            setListing(response.data.data);
                            console.log(response.data.data);
                        }
                    } catch (error) {
                        console.error('Error fetching listing:', error);
                        navigate("/404page");
                    }
                };
        
                fetchListing();
        
                return () => {
                    isMounted = false;
                };
            }, [id, navigate]);
        
            if (!listing) return <p>Loading...</p>;
        
            // Settings for react-slick
            const sliderSettings = {
                dots: true,
                infinite: true,
                speed: 800,
                slidesToShow: 1,
                slidesToScroll: 1,
                lazyLoad: 'ondemand',
            };
            console.log(listing.phone );
            
            const showContact = () => {
                alert(`Contact: ${listing.phone}`)
            }
        
            return (
                <>
                    <Navbar />
                    <div className="property-container">
                        <div className="property-card">
                            <Slider {...sliderSettings}>
                                {listing.images.map((img, index) => (
                                    <div key={index}>
                                        <img src={img} alt={listing.title} className="property-image" />
                                    </div>
                                ))}
                            </Slider>
                            <div className="property-details">
                                <h2 className="property-title">{listing.title}</h2>
                                <p className="property-description">{listing.description}</p>
                                <p className="property-location">
                                    {listing.address.street}, {listing.address.city}, {listing.address.state}, {listing.address.zipCode}, {listing.address.country}
                                </p>
        
                                <div className="property-features">
                                    <p><FaParking /> {listing.parking ? 'Parking Available' : 'No Parking'}</p>
                                    <p><FaWifi /> {listing.wifi ? 'Wi-Fi Available' : 'No Wi-Fi'}</p>
                                    <p><FaPaw /> {listing.petFriendly ? 'Pet-Friendly' : 'No Pets'}</p>
                                    <p><FaBed /> {listing.bedrooms} Bedrooms</p>
                                    <p><FaBath /> {listing.bathrooms} Bathrooms</p>
                                    <p>Year Built: {listing.yearBuilt}</p>
                                    <p>Size: {listing.size} sqft</p>
                                </div>
                                <h2 className="property-price">${listing.price}</h2>
                            </div>
                            <div className='datepicker-container'>
                                <button className='booking-button' onClick={showContact}>
                                    Inquire now
                                </button>
        
                            </div>
                        </div>
                    </div>
                </>
            );
        }
      |-SignIn.jsx
        import React, { useState } from 'react';
        import { useNavigate } from 'react-router-dom';
        import { useDispatch } from 'react-redux';
        import { loginUser } from '../services/authServices';  // Import the login function from authServices
        import '../assets/styles/signin.css';
        import Navbar from '../components/navbar';
        import axiosWithHeader from '../services/axios'
        
        const SignIn = () => {
          const dispatch = useDispatch();
          const navigate = useNavigate();
        
          const [email, setEmail] = useState('');
          const [password, setPassword] = useState('');
          const [loading, setLoading] = useState(false);
          
        
          // Handle Google OAuth login redirection
          const redirectToGoogleSignin = () => {
            window.location.href = `${import.meta.env.VITE_API_URL}/api/auth/google/signin`;
          };
        
          // Handle Email and Password Sign-In
          const handleEmailSignIn = async (e) => {
            e.preventDefault();
            setLoading(true);
        
            try {
              // Call loginUser function from authServices
              const response = await loginUser({ email, password }, dispatch);
              localStorage.setItem('token', response.data.token);
              // Set the token as a default header for future requests
              axiosWithHeader.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;
        
              if (response.data.success) {
                // Navigate to success page after login
                navigate('/signin/success');
              }
            } catch (err) {
              const errorMessage = err.response?.data?.message || 'Something went wrong. Please try again.';
              navigate(`/signin/failure?message=${encodeURIComponent(errorMessage)}`);
            } finally {
              setLoading(false);
            }
          };
        
          return (
            <>
              <Navbar />
              <div className="login-container">
                <h1>Welcome back</h1>
        
               
                  <form onSubmit={handleEmailSignIn}>
                    <input
                      type="email"
                      placeholder="Email address*"
                      required
                      className="input-email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                    />
                    <input
                      type="password"
                      placeholder="Password*"
                      required
                      className="input-password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                    />
                    <button type="submit" className="continue-button" disabled={loading}>
                      {loading ? 'Signing in...' : 'Continue'}
                    </button>
                  </form>
        
                <p className="signup-link">
                  Don't have an account? <a href="/signup">Sign Up</a>
                </p>
        
                <div className="divider">
                  <hr /> <span>OR</span> <hr />
                </div>
        
                {/* Google OAuth sign-in */}
                <div className="social-login">
                  <button className="social-button google" onClick={redirectToGoogleSignin}>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google Logo" />
                    Continue with Google
                  </button>
        
                  {/* Other social logins (disabled for now) */}
                  <button className="social-button microsoft" disabled>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Microsoft_logo.svg/1024px-Microsoft_logo.svg.png" alt="Microsoft Logo" />
                    Continue with Microsoft Account
                  </button>
        
                  <button className="social-button apple" disabled>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg" alt="Apple Logo" />
                    Continue with Apple
                  </button>
                </div>
              </div>
            </>
          );
        };
        
        export default SignIn;
      |-Profile.jsx
        import React, { useState, useRef, useEffect } from "react";
        import { useSelector } from "react-redux";
        import '../assets/styles/profile.css';
        import {  useNavigate } from "react-router-dom";
        import Navbar from "../components/navbar";
        import axios from "axios";
        import { SignOut } from "../services/authServices";
        import Footer from "../components/Footer";
        
        
        export default function Profile() {
            const { currentUser } = useSelector((state) => state.user);
            const navigate = useNavigate();
        
            const [updateData, setUpdateData] = useState({
                id: currentUser ? currentUser.id : '',
                username: currentUser ? currentUser.username : '',
                email: currentUser ? currentUser.email : '',
                password: '', // Initially empty, filled when user enters a new password
            });
        
            const [toggle, setToggle] = useState(false); // Toggle for expanding profile section
            const [error, setError] = useState('');
            const [loading, setLoading] = useState(false);
        
            const imageUpdate = useRef(null);
        
            useEffect(() => {
                if (!currentUser) {
                    navigate("/signin"); // Redirect to signin if currentUser is not set
                }
            }, [currentUser, navigate]);
        
            const handleUpdate = (e) => {
                const { name, value } = e.target;
                setError('');
        
                if (value.trim() === '') return; // Prevent empty updates
        
                setUpdateData((prev) => ({
                    ...prev,
                    [name]: value,
                }));
            };
        
            const handleSubmit = async () => {
                if (!updateData.username || !updateData.email) {
                    setError('Username and Email are required fields.');
                    return;
                }
        
                if (updateData.password && updateData.password !== updateData.confirmPassword) {
                    setError('Passwords do not match.');
                    return;
                }
        
                try {
                    setError('');
                    setLoading(true);
        
                    const response = await axios.put('/api/update-profile', updateData);
                    console.log('Profile updated:', response.data);
        
                } catch (error) {
                    setError('Failed to update profile. Please try again.');
                } finally {
                    setLoading(false);
                }
            };
        
            const navigateateToCreate = () => {
                navigate('/create')
            }
        
            const handleToggle = () => {
                setToggle(!toggle); // Toggle expand/collapse
            };
        
            const handleSignout = async () => {
                try {
                  await SignOut();
                } catch (error) {
                  console.error('Error during sign-out navigation:', error);
                }
              };
        
            return (
                <>
                    {currentUser && (
                        <>
                            <Navbar />
                            <div className="profile">
                                <img
                                    src="https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659651_640.png"
                                    alt="User Avatar"
                                    onClick={() => imageUpdate.current.click()}
                                />
                                <div className="setting">
                                    <input
                                        type="file"
                                        accept="image/*"
                                        name="avatar"
                                        style={{ display: 'none' }}
                                        ref={imageUpdate}
                                        onChange={handleUpdate}
                                    />
        
                                    {/* Profile button */}
                                    <button className="profile-toggle-btn" onClick={handleToggle}>
                                        Profile
                                    </button>
        
                                    {/* Show profile info if toggle is true */}
                                    {toggle && (
                                        <div className="profile-info">
                                            <h4>{error}</h4>
                                            <label htmlFor="username">Change Username</label>
                                            <input
                                                type="text"
                                                name="username"
                                                value={updateData.username}
                                                onChange={handleUpdate}
                                            />
        
                                            <label htmlFor="email">Change Email</label>
                                            <input
                                                type="email"
                                                name="email"
                                                value={updateData.email}
                                                onChange={handleUpdate}
                                            />
        
                                            <label htmlFor="password">Change Password</label>
                                            <input
                                                type="password"
                                                name="password"
                                                placeholder="New Password"
                                                onChange={handleUpdate}
                                            />
                                            <input
                                                type="password"
                                                name="confirmPassword"
                                                placeholder="Confirm Password"
                                                onChange={handleUpdate}
                                            />
        
                                            <button
                                                className="upating-profile"
                                                type="submit"
                                                onClick={handleSubmit}
                                                disabled={loading}>
                                                {loading ? 'Updating...' : 'Update Profile'}
                                            </button>
                                        </div>
                                    )}
                                </div>
        
                                <button className="profile-toggle-btn" onClick={navigateateToCreate}>Create Listing</button>
                                <button className="profile-toggle-btn">Show My Listing</button>
                                <button className="profile-toggle-btn" onClick={handleSignout}>Sign Out</button>
                            </div>
                        </>
                    )}
        
                    <Footer />
                </>
            );
        }
      |-AuthStatus.jsx
        import React, { useEffect } from 'react';
        import { useNavigate, useSearchParams } from 'react-router-dom';
        import { FaCheckCircle, FaExclamationTriangle } from 'react-icons/fa'; // Icons for success and failure
        import '../assets/styles/authStatus.css';  // Centralized CSS
        import { jwtDecode } from "jwt-decode";
        import { useDispatch } from 'react-redux';
        import { setUser } from '../redux/userSlice';
        
        // Failure Component
        export const AuthFailure = ({ type = "SignUp" }) => {  // Default type is "SignUp" if not provided
          const [searchParams] = useSearchParams();
          const navigate = useNavigate();
        
          // Extract the error message from query params or use a default message
          const errorMessage = searchParams.get('message') || `Failed to ${type}. Please try again.`;
        
          useEffect(() => {
            // Redirect to the correct page after 3 seconds
            const timer = setTimeout(() => {
              
              navigate(`/${type.toLowerCase()}`); // Redirects to /signin or /signup
            }, 3000);
        
            // Clean up timer
            return () => clearTimeout(timer);
          }, [navigate, type]);
        
          return (
            <div className="error-container">
              <div className="error-icon">
                <FaExclamationTriangle className="icon" /> {/* Failure icon */}
              </div>
              <h1 className="error-title">{`${type} Failed`}</h1>
              <p className="error-message">{errorMessage}</p>
              <p className="redirect-message">You will be redirected to the {type} page shortly...</p>
            </div>
          );
        };
        
        // Success Component
        export const AuthSuccess = ({ type = "SignUp" }) => {  // Default type is "SignUp" if not provided
          const navigate = useNavigate();
          const [searchParams] = useSearchParams();
          const dispatch = useDispatch();
        
          useEffect(() => {
            // Redirect to the homepage after 2 seconds
            const timer = setTimeout(() => {
              const token = searchParams.get('token');
              if (token){
              const decoded = jwtDecode(token);
              dispatch(setUser(decoded));}
              navigate('/');
            }, 2000);
        
            // Clean up timer
            return () => clearTimeout(timer);
          }, [navigate]);
        
          return (
            <div className="success-container">
              <div className="success-icon">
                <FaCheckCircle className="icon" /> {/* Success icon */}
              </div>
              <h1 className="success-title">{`${type} Successful!`}</h1>
              <p className="redirect-message">Redirecting to the homepage...</p>
            </div>
          );
        };
        
      |-Home.jsx
        import React from "react";
        import Navbar from "../components/navbar";
        import Search from "../components/search";
        import Card from "../components/card";
        
        
        
        export default function Home(){
           return( <>
            <Navbar />
            <Search />
            <Card /> 
           </>)
        }
      |-SignUp.jsx
        import React from 'react';
        import Navbar from '../components/navbar';
        import SignUpOAuth from '../components/SignUpOAuth';
        import SignUpForm from '../components/SignUpFormLocal';
        
        const SignUp = () => {
          return (
            <>
              <Navbar />
              <div className="signup-page-container">
                
                {/* Local Email/Password Sign-Up Section */}
                <SignUpForm />
        
                {/* Divider between Local and OAuth sign-up form */}
                <div className="divider">
                  <hr />
                  <span>Or sign up with</span>
                  <hr />
                </div>
        
                {/* OAuth Sign-Up Section */}
                <SignUpOAuth />
        
              </div>
            </>
          );
        };
        
        export default SignUp;
        
      |-Agents.jsx
    |-services/
      |-validationHelper.js
        export const validateField = async (field, value, setLoading, setStatus, setError, validationService) => {
          if (value) {
            setLoading(true);
            setStatus(null);
            setError('');
        
            try {
              const response = await validationService(value); // Call the validation service
              if (response.data.success) {
                setStatus('valid'); // Change 'available' to 'valid'
              } else {
                setStatus('invalid'); // Change 'taken' to 'invalid'
                setError(response.data.error.message);
              }
            } catch (err) {
              if (err.response && err.response.status === 400) {
                setStatus('invalid'); // Change 'taken' to 'invalid'
                setError(`This ${field} is already registered.`);
              } else {
                setStatus('error');
                setError(`Error checking ${field} availability.`);
              }
            } finally {
              setLoading(false);
            }
          }
        };
        
      |-axios.js
        import axios from 'axios';
        
        
        const axiosWithHeader = axios.create({
          baseURL: import.meta.env.VITE_API_URL , // Replace with your API base URL
        });
        
        // Optionally, you can set the token here if it exists in local storage
        const token = localStorage.getItem('token');
        if (token) {
            axiosWithHeader.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        }
        
        export default axiosWithHeader;
      |-authServices.jsx
        import axios from 'axios';
        import { setUser } from '../redux/userSlice';
        import Cookies from 'js-cookie';
        
        
        
        const API_URL = import.meta.env.VITE_API_URL;
        const tokenName = import.meta.env.VITE_JWT_COOKIE_NAME;
        
        
        // Create an Axios instance with a base URL and default options
        const axiosInstance = axios.create({
          baseURL: API_URL,        // Base URL for all API requests
          withCredentials: true,   // Include credentials with every request (useful for authentication)
        });
        
        // Function to register a new user
        export const registerUser = async (userData, dispatch) => {
          console.log('registerUser called with:', userData);
          try {
            console.log('Sending request to:', `${API_URL}/api/auth/signup`); // Log API endpoint
            const response = await axiosInstance.post('/api/auth/signup', userData); // Use axiosInstance
            console.log('API response:', response.data.data);
        
            // Dispatch the action after successful registration
            dispatch(setUser(response.data.data));
        
            return response;
          } catch (error) {
            console.error('API error:', error);
            if (error.response) {
              console.error('Error response:', error.response.data);
              console.error('Error status:', error.response.status);
            } else if (error.request) {
              console.error('Error request:', error.request);
            } else {
              console.error('Error message:', error.message);
            }
            throw error; // Re-throw the error to be handled by the caller
          }
        };
        
        // Login function
        export const loginUser = async (userData, dispatch) => {
          try {
            const response = await axiosInstance.post('/api/auth/signin', userData, dispatch); // Use axiosInstance
            console.log('Login API response:', response);
        
            // Assuming your backend sends the token in response
            Cookies.set('propertyHubAuthToken', response.data.token); // Store token in cookies
            dispatch(setUser(response.data.data)); // Dispatch the action to update Redux and persist it
        
            return response;
          } catch (error) {
            console.error('Error during login:', error);
            throw error;
          }
        };
        
        // Function to validate email availability
        export const checkEmailAvailability = async (email) => {
          console.log('checkEmailAvailability called with email:', email);
          try {
            const response = await axiosInstance.get(`/api/auth/check-email/${email}`); // Use axiosInstance
            console.log('Email availability response:', response);
            return response;
          } catch (error) {
            console.error('Error in checkEmailAvailability:', error);
            throw error; // Re-throw the error to be handled by the caller
          }
        };
        
        // Function to validate username availability
        export const checkUsernameAvailability = async (username) => {
          console.log('checkUsernameAvailability called with username:', username);
          try {
            const response = await axiosInstance.get(`/api/auth/check-username/${username}`); // Use axiosInstance
            console.log('Username availability response:', response);
            return response;
          } catch (error) {
            console.error('Error in checkUsernameAvailability:', error);
            throw error;
          }
        };
        
        
        export const SignOut = async () => {
          try {
            // Send logout request to the server
            await axios.post(`${API_URL}/api/auth/logout`);
            
            // Clear cookies and local storage after successful sign-out
            Cookies.remove(tokenName);
            localStorage.clear();
            window.location.href= '/'
        
          } catch (error) {
            console.error('Sign out failed:', error);
            setError('Failed to sign out. Please try again.');
          }
        };
